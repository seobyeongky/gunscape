// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef PROTOBUF_command_2eproto__INCLUDED
#define PROTOBUF_command_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_command_2eproto();
void protobuf_AssignDesc_command_2eproto();
void protobuf_ShutdownFile_command_2eproto();

class Vector2d;
class Command;

enum CommandType {
  COMMAND_GO = 0,
  COMMAND_SELECT_ABILITY = 1,
  COMMAND_RELOAD = 2,
  COMMAND_PICK_UP = 3,
  COMMAND_USE_ABILITY = 4,
  COMMAND_SHOT = 5,
  COMMAND_SWAP = 6
};
bool CommandType_IsValid(int value);
const CommandType CommandType_MIN = COMMAND_GO;
const CommandType CommandType_MAX = COMMAND_SWAP;
const int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandType_descriptor();
inline const ::std::string& CommandType_Name(CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandType_descriptor(), value);
}
inline bool CommandType_Parse(
    const ::std::string& name, CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
// ===================================================================

class Vector2d : public ::google::protobuf::Message {
 public:
  Vector2d();
  virtual ~Vector2d();

  Vector2d(const Vector2d& from);

  inline Vector2d& operator=(const Vector2d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2d& default_instance();

  void Swap(Vector2d* other);

  // implements Message ----------------------------------------------

  Vector2d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2d& from);
  void MergeFrom(const Vector2d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:Vector2d)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static Vector2d* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CommandType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::CommandType type() const;
  inline void set_type(::CommandType value);

  // optional int32 wh_ = 2;
  inline bool has_wh_() const;
  inline void clear_wh_();
  static const int kWhFieldNumber = 2;
  inline ::google::protobuf::int32 wh_() const;
  inline void set_wh_(::google::protobuf::int32 value);

  // optional int32 selected_num = 3;
  inline bool has_selected_num() const;
  inline void clear_selected_num();
  static const int kSelectedNumFieldNumber = 3;
  inline ::google::protobuf::int32 selected_num() const;
  inline void set_selected_num(::google::protobuf::int32 value);

  // optional .Vector2d focus = 4;
  inline bool has_focus() const;
  inline void clear_focus();
  static const int kFocusFieldNumber = 4;
  inline const ::Vector2d& focus() const;
  inline ::Vector2d* mutable_focus();
  inline ::Vector2d* release_focus();
  inline void set_allocated_focus(::Vector2d* focus);

  // @@protoc_insertion_point(class_scope:Command)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_wh_();
  inline void clear_has_wh_();
  inline void set_has_selected_num();
  inline void clear_has_selected_num();
  inline void set_has_focus();
  inline void clear_has_focus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 wh__;
  ::Vector2d* focus_;
  ::google::protobuf::int32 selected_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_command_2eproto();
  friend void protobuf_AssignDesc_command_2eproto();
  friend void protobuf_ShutdownFile_command_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// ===================================================================


// ===================================================================

// Vector2d

// required float x = 1;
inline bool Vector2d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector2d::x() const {
  return x_;
}
inline void Vector2d::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Vector2d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector2d::y() const {
  return y_;
}
inline void Vector2d::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Command

// required .CommandType type = 1;
inline bool Command::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::CommandType Command::type() const {
  return static_cast< ::CommandType >(type_);
}
inline void Command::set_type(::CommandType value) {
  assert(::CommandType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 wh_ = 2;
inline bool Command::has_wh_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_wh_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_wh_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_wh_() {
  wh__ = 0;
  clear_has_wh_();
}
inline ::google::protobuf::int32 Command::wh_() const {
  return wh__;
}
inline void Command::set_wh_(::google::protobuf::int32 value) {
  set_has_wh_();
  wh__ = value;
}

// optional int32 selected_num = 3;
inline bool Command::has_selected_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command::set_has_selected_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command::clear_has_selected_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command::clear_selected_num() {
  selected_num_ = 0;
  clear_has_selected_num();
}
inline ::google::protobuf::int32 Command::selected_num() const {
  return selected_num_;
}
inline void Command::set_selected_num(::google::protobuf::int32 value) {
  set_has_selected_num();
  selected_num_ = value;
}

// optional .Vector2d focus = 4;
inline bool Command::has_focus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Command::set_has_focus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Command::clear_has_focus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Command::clear_focus() {
  if (focus_ != NULL) focus_->::Vector2d::Clear();
  clear_has_focus();
}
inline const ::Vector2d& Command::focus() const {
  return focus_ != NULL ? *focus_ : *default_instance_->focus_;
}
inline ::Vector2d* Command::mutable_focus() {
  set_has_focus();
  if (focus_ == NULL) focus_ = new ::Vector2d;
  return focus_;
}
inline ::Vector2d* Command::release_focus() {
  clear_has_focus();
  ::Vector2d* temp = focus_;
  focus_ = NULL;
  return temp;
}
inline void Command::set_allocated_focus(::Vector2d* focus) {
  delete focus_;
  focus_ = focus;
  if (focus) {
    set_has_focus();
  } else {
    clear_has_focus();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommandType>() {
  return ::CommandType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_command_2eproto__INCLUDED
